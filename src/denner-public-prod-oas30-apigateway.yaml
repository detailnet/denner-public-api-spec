openapi: "3.0.1"
info:
  title: "denner-public"
  version: "2019-10-28T07:43:49Z"
servers:
  - url: "https://denner-public-api.detailnet.ch/{basePath}"
    variables:
      basePath:
        default: "/v1"
paths:
  /base-poster:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BasePosterInput"
        required: true
      responses:
        400:
          description: "400 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        500:
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content: {}
        201:
          description: "201 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/File"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-lambda-tools-${stageVariables.lambda_env}_createBasePoster:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "201"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          (Invalid|Article).*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://denner-public-api-docs.detailnet.ch'"
            responseTemplates:
              application/json: "{\n    \"error\": \"Invalid input\",\n    \"message\"\
                : \"$util.escapeJavaScript($input.path('$.errorMessage'))\"\n}"
          .*[Ee](rror|xception).*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://denner-public-api-docs.detailnet.ch'"
            responseTemplates:
              application/json: "{\n    \"error\": \"$util.escapeJavaScript($input.path('$.errorType'))\"\
                ,\n    \"message\": \"$util.escapeJavaScript($input.path('$.errorMessage'))\"\
                \n    ### NO $input.path('$.trace')\n}"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /stores:
    get:
      parameters:
        - name: "page_size"
          in: "query"
          schema:
            type: "string"
        - name: "Accept-Language"
          in: "header"
          schema:
            type: "string"
        - name: "page"
          in: "query"
          schema:
            type: "string"
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:${stageVariables.mobile_api}-${stageVariables.lambda_env}_listStores:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($queryParams = $input.params().querystring)\r\n\
            {\r\n  \"locale\": \"$input.params().header.get('Accept-Language')\",\r\
            \n  \"query\": \"#foreach($paramName in $queryParams.keySet())$paramName=$util.escapeJavaScript($queryParams.get($paramName))#if($foreach.hasNext)&#end#end\"\
            \r\n}\r\n"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            contentHandling: "CONVERT_TO_TEXT"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /online-articles:
    get:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:${stageVariables.mobile_api}-${stageVariables.lambda_env}_listOnlineArticles:${stageVariables.lambda_alias}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($queryParams = $input.params().querystring)\r\n\
            {\r\n  \"query\": \"#foreach($paramName in $queryParams.keySet())$paramName=$util.escapeJavaScript($queryParams.get($paramName))#if($foreach.hasNext)&#end#end\"\
            \r\n}"
        passthroughBehavior: "never"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            contentHandling: "CONVERT_TO_TEXT"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"
    BasePosterInput:
      required:
        - "article_id"
      type: "object"
      properties:
        article_id:
          pattern: "/^[0-9]{6}$/"
          type: "string"
          description: "The unique identifier of an article"
        locale:
          type: "string"
          description: "Locale/language (supported are \"de\", \"fr\" and \"it\")"
          default: "de"
        quantity:
          minimum: 1
          type: "integer"
          description: "Quantity for prices and texts"
          format: "int32"
          default: 1
        wine-year:
          minimum: 1900
          type: "integer"
          description: "Wine year for texts"
          format: "int32"
        valid_on:
          type: "string"
          description: "Valid on (e.g. \"2018-02-16\") for prices"
    File:
      type: "object"
      properties:
        url:
          type: "string"
          description: "URL of the PDF document"
  securitySchemes:
    AppKeyHeader:
      type: "apiKey"
      name: "App-Key"
      in: "header"
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
        authorizerUri: "arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-lambda-tools_authorizeApiRequest:live/invocations"
        authorizerCredentials: "arn:aws:iam::802555642192:role/aws-apigateway-role.denner-public-api"
        authorizerResultTtlInSeconds: 3600
        type: "token"
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
      gatewayresponse.header.Access-Control-Allow-Headers: "'App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
