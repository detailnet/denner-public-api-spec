components:
  schemas:
    BasePosterInput:
      properties:
        article_id:
          description: The unique identifier of an article
          pattern: /^[0-9]{6}$/
          type: string
        locale:
          default: de
          description: Locale/language (supported are "de", "fr" and "it")
          type: string
        quantity:
          default: 1
          description: Quantity for prices and texts
          format: int32
          minimum: 1
          type: integer
        valid_on:
          description: Valid on (e.g. "2018-02-16") for prices
          type: string
        wine_year:
          description: Wine year for texts
          format: int32
          minimum: 1900
          type: integer
      required:
        - article_id
      type: object
    Empty:
      title: Empty Schema
      type: object
    File:
      properties:
        url:
          description: URL of the PDF document
          type: string
      type: object
  securitySchemes:
    AppKeyHeader:
      in: header
      name: App-Key
      type: apiKey
      x-amazon-apigateway-authorizer:
        authorizerCredentials: arn:aws:iam::802555642192:role/aws-apigateway-role.denner-public-api
        authorizerResultTtlInSeconds: 3600
        authorizerUri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-lambda-tools_authorizeApiRequest:live/invocations
        type: token
      x-amazon-apigateway-authtype: custom
info:
  title: denner-public
  version: "2019-10-28T07:43:49Z"
openapi: 3.0.1
paths:
  /advertised-articles/{year_week}:
    get:
      parameters:
        - in: path
          name: year_week
          required: true
          schema:
            type: string
        - in: query
          name: view-as-override
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "403":
          content: {}
          description: 403 response
        "404":
          content: {}
          description: 404 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        cacheKeyParameters:
          - method.request.path.year_week
        cacheNamespace: rtd4lf
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.articles_app_id
          integration.request.header.App-Key: stageVariables.articles_app_key
          integration.request.path.year_week: method.request.path.year_week
          integration.request.querystring.view-as: '''export-xpt'''
          integration.request.querystring.view-as-override: method.request.querystring.view-as-override
        responses:
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          5\d2:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            responseTemplates:
              application/json: |-
                #set($root = $input.path('$'))
                {
                    "advertised_articles": $root.advertised_articles_by_week,
                    "total_items": $root.total_items
                }
            statusCode: "200"
        type: http
        uri: https://${stageVariables.articles_url}/advertised-articles/{year_week}
    options:
      parameters:
        - in: path
          name: year_week
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /banner-publications/{publication_id}:
    get:
      parameters:
        - in: path
          name: publication_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "403":
          content: {}
          description: 403 response
        "404":
          content: {}
          description: 404 response
        "406":
          content: {}
          description: 406 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        cacheKeyParameters:
          - method.request.path.publication_id
        cacheNamespace: 3wf3u6
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.advertising_app_id
          integration.request.header.App-Key: stageVariables.advertising_app_key
          integration.request.path.publication_id: method.request.path.publication_id
          integration.request.querystring.view-as: '''online_publication.only_banner_articles'''
        responses:
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          "406":
            statusCode: "406"
          5\d{2}:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: http
        uri: https://${stageVariables.advertising_url}/online-publications/{publication_id}
    options:
      parameters:
        - in: path
          name: publication_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /base-posters:
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''OPTIONS,POST'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BasePosterInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
          description: 201 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "400":
          content: {}
          description: 400 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "500":
          content: {}
          description: 500 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_match
        responses:
          (Invalid|Article).*:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''http://denner-api-docs.detailnet.ch'''
            responseTemplates:
              application/json: |-
                {
                    "error": "Invalid input",
                    "message": "$util.escapeJavaScript($input.path('$.errorMessage'))"
                }
            statusCode: "400"
          .*[Ee](rror|xception).*:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''http://denner-api-docs.detailnet.ch'''
            responseTemplates:
              application/json: |-
                {
                    "error": "$util.escapeJavaScript($input.path('$.errorType'))",
                    "message": "$util.escapeJavaScript($input.path('$.errorMessage'))"
                    ### NO $input.path('$.trace')
                }
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "201"
        type: aws
        uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:denner-lambda-tools-${stageVariables.lambda_env}_createBasePoster:${stageVariables.lambda_alias}/invocations
  /display-publications:
    get:
      parameters:
        - in: query
          name: sort
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: string
        - in: query
          name: page_size
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "403":
          content: {}
          description: 403 response
        "406":
          content: {}
          description: 406 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        cacheKeyParameters:
          - method.request.querystring.filter
          - method.request.querystring.page
          - method.request.querystring.page_size
          - method.request.querystring.sort
        cacheNamespace: 4thqjm
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.advertising_app_id
          integration.request.header.App-Key: stageVariables.advertising_app_key
          integration.request.querystring.filter: method.request.querystring.filter
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.page_size: method.request.querystring.page_size
          integration.request.querystring.sort: method.request.querystring.sort
          integration.request.querystring.view-as: '''jls'''
        responses:
          "403":
            statusCode: "403"
          "406":
            statusCode: "406"
          5\d{2}:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: http
        uri: https://${stageVariables.advertising_url}/display-publications
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /display-publications/{screen}/{layout}:
    get:
      parameters:
        - in: query
          name: locale
          schema:
            type: string
        - in: query
          name: display-on
          schema:
            type: string
        - in: path
          name: screen
          required: true
          schema:
            type: string
        - in: path
          name: layout
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "204":
          content: {}
          description: 204 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.advertising_app_id
          integration.request.header.App-Key: stageVariables.advertising_app_key
          integration.request.querystring.display-on: method.request.querystring.display-on
          integration.request.querystring.filter: '''[{"property":"display_on","value":"today"}]'''
          integration.request.querystring.layout: method.request.path.layout
          integration.request.querystring.locale: method.request.querystring.locale
          integration.request.querystring.screen: method.request.path.screen
          integration.request.querystring.sort: '''[{"property":"sort_index"}]'''
          integration.request.querystring.view-as: '''jls'''
        responses:
          "204":
            statusCode: "204"
          5\d{2}:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            responseTemplates:
              application/json: $input.json('$.display_publications[0]')
            statusCode: "200"
        type: http
        uri: https://${stageVariables.advertising_url}/display-publications
    options:
      parameters:
        - in: path
          name: screen
          required: true
          schema:
            type: string
        - in: path
          name: layout
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Accept-Language,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /newsletter-articles:
    get:
      parameters:
        - in: query
          name: locale
          schema:
            type: string
        - in: query
          name: week
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "403":
          content: {}
          description: 403 response
        "404":
          content: {}
          description: 404 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        cacheKeyParameters:
          - integration.request.querystring.usage
        cacheNamespace: rrsmpj
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.advertising_app_id
          integration.request.header.App-Key: stageVariables.advertising_app_key
          integration.request.querystring.usage: '''newsletter'''
          integration.request.querystring.week: method.request.querystring.week
        responses:
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          5\d{2}:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            responseTemplates:
              application/json: |
                #set($root = $input.path('$'))
                #set($locale = $input.params('locale').toLowerCase())
                #set($articles = [])
                #foreach($article in $root.online_publication_articles)
                #set($path = '$.online_publication_articles[' + ($foreach.count - 1) + ']')
                #if($article.newsletter.contains($locale) || $locale == "")
                $util.quiet($articles.add($input.json($path)))
                #end
                #end
                {
                  "articles":  $articles,
                  "total_items": $articles.size()
                }
            statusCode: "200"
        type: http
        uri: https://${stageVariables.advertising_url}/online-publication-articles
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /online-articles:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: "#set($queryParams = $input.params().querystring)\r\n{\r\n  \"query\": \"#foreach($paramName in $queryParams.keySet())$paramName=$util.escapeJavaScript($queryParams.get($paramName))#if($foreach.hasNext)&#end#end\"\r\n}"
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: aws
        uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:${stageVariables.mobile_api}-${stageVariables.lambda_env}_listOnlineArticles:${stageVariables.lambda_alias}/invocations
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            contentHandling: CONVERT_TO_TEXT
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /online-filters:
    get:
      parameters:
        - in: query
          name: page_size
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "403":
          content: {}
          description: 403 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.advertising_app_id
          integration.request.header.App-Key: stageVariables.advertising_app_key
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.page_size: method.request.querystring.page_size
        responses:
          "403":
            statusCode: "403"
          5\d{2}:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: http
        uri: https://${stageVariables.advertising_url}/online-filters
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /online-groups:
    get:
      parameters:
        - in: query
          name: page_size
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "403":
          content: {}
          description: 403 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.articles_app_id
          integration.request.header.App-Key: stageVariables.articles_app_key
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.page_size: method.request.querystring.page_size
        responses:
          "403":
            statusCode: "403"
          5\d{2}:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: http
        uri: https://${stageVariables.articles_url}/online-groups
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /online-publications:
    get:
      parameters:
        - in: query
          name: sort
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: string
        - in: query
          name: page_size
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "403":
          content: {}
          description: 403 response
        "406":
          content: {}
          description: 406 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.advertising_app_id
          integration.request.header.App-Key: stageVariables.advertising_app_key
          integration.request.querystring.filter: method.request.querystring.filter
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.page_size: method.request.querystring.page_size
          integration.request.querystring.sort: method.request.querystring.sort
        responses:
          "403":
            statusCode: "403"
          "406":
            statusCode: "406"
          5\d[2]:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: http
        uri: https://${stageVariables.advertising_url}/online-publications
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /online-publications/{publication_id}:
    get:
      parameters:
        - in: path
          name: publication_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "403":
          content: {}
          description: 403 response
        "404":
          content: {}
          description: 404 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.advertising_app_id
          integration.request.header.App-Key: stageVariables.advertising_app_key
          integration.request.path.publication_id: method.request.path.publication_id
        responses:
          "403":
            statusCode: "403"
          "404":
            statusCode: "404"
          5\d{2}:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: http
        uri: https://${stageVariables.advertising_url}/online-publications/{publication_id}
    options:
      parameters:
        - in: path
          name: publication_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /online-specials:
    get:
      parameters:
        - in: query
          name: page_size
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "403":
          content: {}
          description: 403 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.articles_app_id
          integration.request.header.App-Key: stageVariables.articles_app_key
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.page_size: method.request.querystring.page_size
        responses:
          "403":
            statusCode: "403"
          5\d{2}:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: http
        uri: https://${stageVariables.articles_url}/online-specials
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /online-stores:
    get:
      parameters:
        - in: query
          name: sort
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: string
        - in: query
          name: page_size
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "403":
          content: {}
          description: 403 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        cacheKeyParameters:
          - integration.request.header.App-ID
          - integration.request.header.App-Key
          - integration.request.querystring.only_online_publishable
        cacheNamespace: 22dskw
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.stores_app_id
          integration.request.header.App-Key: stageVariables.stores_app_key
          integration.request.querystring.filter: method.request.querystring.filter
          integration.request.querystring.only_online_publishable: '''yes'''
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.page_size: method.request.querystring.page_size
          integration.request.querystring.sort: method.request.querystring.sort
        responses:
          "403":
            statusCode: "403"
          5\d{2}:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: http
        uri: https://${stageVariables.stores_url}/stores
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /store-channels:
    get:
      parameters:
        - in: query
          name: page_size
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "403":
          content: {}
          description: 403 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.stores_app_id
          integration.request.header.App-Key: stageVariables.stores_app_key
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.page_size: method.request.querystring.page_size
        responses:
          "403":
            statusCode: "403"
          5\d{2}:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: http
        uri: https://${stageVariables.stores_url}/store-channels
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /store-services:
    get:
      parameters:
        - in: query
          name: page_size
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "403":
          content: {}
          description: 403 response
        "500":
          content: {}
          description: 500 response
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        httpMethod: GET
        passthroughBehavior: when_no_match
        requestParameters:
          integration.request.header.App-ID: stageVariables.stores_app_id
          integration.request.header.App-Key: stageVariables.stores_app_key
          integration.request.querystring.page: method.request.querystring.page
          integration.request.querystring.page_size: method.request.querystring.page_size
        responses:
          "403":
            statusCode: "403"
          5\d{2}:
            statusCode: "500"
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: http
        uri: https://${stageVariables.stores_url}/store-services
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /stores:
    get:
      parameters:
        - in: query
          name: page_size
          schema:
            type: string
        - in: header
          name: Accept-Language
          schema:
            type: string
        - in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: when_no_templates
        requestTemplates:
          application/json: "#set($queryParams = $input.params().querystring)\r\n{\r\n  \"locale\": \"$input.params().header.get('Accept-Language')\",\r\n  \"query\": \"#foreach($paramName in $queryParams.keySet())$paramName=$util.escapeJavaScript($queryParams.get($paramName))#if($foreach.hasNext)&#end#end\"\r\n}\r\n"
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: aws
        uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:${stageVariables.mobile_api}-${stageVariables.lambda_env}_listStores:${stageVariables.lambda_alias}/invocations
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            contentHandling: CONVERT_TO_TEXT
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
  /tobacco-articles:
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
      security:
        - AppKeyHeader: []
      x-amazon-apigateway-integration:
        contentHandling: CONVERT_TO_TEXT
        httpMethod: POST
        passthroughBehavior: never
        requestTemplates:
          application/json: "#set($queryParams = $input.params().querystring)\r\n{\r\n  \"article_group\": \"79\",\r\n  \"query\": \"#foreach($paramName in $queryParams.keySet())$paramName=$util.escapeJavaScript($queryParams.get($paramName))#if($foreach.hasNext)&#end#end\"\r\n}"
        responses:
          default:
            contentHandling: CONVERT_TO_TEXT
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: aws
        uri: arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:802555642192:function:${stageVariables.mobile_api}-${stageVariables.lambda_env}_listOnlineArticlesForGroup:${stageVariables.lambda_alias}/invocations
    options:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
          description: 200 response
          headers:
            Access-Control-Allow-Headers:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Origin:
              schema:
                type: string
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        responses:
          default:
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''https://denner-api-docs.detailnet.ch'''
            statusCode: "200"
        type: mock
servers:
  - url: https://denner-online-api.detailnet.ch/{basePath}
    variables:
      basePath:
        default: v1
x-amazon-apigateway-gateway-responses:
  DEFAULT_4XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
  DEFAULT_5XX:
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Headers: '''App-Key,Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      gatewayresponse.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
      gatewayresponse.header.Access-Control-Allow-Origin: '''*'''
